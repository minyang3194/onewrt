#=================================================
# https://github.com/P3TERX/Actions-OpenWrt
# Description: Build OpenWrt using GitHub Actions
# Lisence: MIT
# Author: P3TERX
# Blog: https://p3terx.com
#=================================================

name: YAOP-2203-From-QiuSimons-YAOF

on: 
  #push:
    # 文件改变才会触发
       #paths:
        #- 'diy-lean/package/lean/default-settings/files/zzz-default-settings'
  # 分支master提交时触发
     # branches:
     #  - master     
 # 仅在有以 'v' 开头的tag push 时才会触发
     #tags:
      # - v* 
 # 定时才会触发
  #schedule:
    #- cron: 0 16 * * 5
# 点击star才会触发    
  watch:
      types: [started]
      
  repository_dispatch:
  workflow_dispatch:
    inputs:
      ssh:
        description: 'SSH connection to Actions'
        required: false
        default: 'false'


env:
  REPO_TOKEN: ${{ secrets.REPO_TOKEN }}
  PPPOE_USERNAME: ${{ secrets.PPPOE_USERNAME }}
  PPPOE_PASSWD: ${{ secrets.PPPOE_PASSWD }}
  SCKEY: ${{ secrets.SCKEY }}
  TELEGRAM_TOKEN: ${{ secrets.TELEGRAM_TOKEN }}
  TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
  SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
  TZ: Asia/Shanghai

jobs:
  build:
    runs-on: ubuntu-20.04
    
    name: Build ${{matrix.target}}
    strategy:
      fail-fast: false
      matrix:
        #target: ["${{ github.event.client_payload.target }}"]
         #target: [x86-64,x86-64-docker]
         target: [x86-64]
     
    steps:
    - name: Checkout
      uses: actions/checkout@main
      with:
          fetch-depth: 0
          
    - name: Load Settings.ini
      run: |
        source "${GITHUB_WORKSPACE}/devices/common/settings.ini"
        if [ -f "devices/${{matrix.target}}/settings.ini" ]; then
          source "${GITHUB_WORKSPACE}/devices/${{matrix.target}}/settings.ini"
        fi
        echo "REPO_URL=${REPO_URL}" >> $GITHUB_ENV
        echo "REPO_BRANCH=${REPO_BRANCH}" >> $GITHUB_ENV
        echo "CONFIG_FILE=${CONFIG_FILE}" >> $GITHUB_ENV
        echo "DIY_SH=${DIY_SH}" >> $GITHUB_ENV
        echo "DIY_SH1=${DIY_SH1}" >> $GITHUB_ENV
        echo "DIY_SH2=${DIY_SH2}" >> $GITHUB_ENV
        echo "DIY_SH3=${DIY_SH3}" >> $GITHUB_ENV
        echo "DIY_SH4=${DIY_SH4}" >> $GITHUB_ENV
        echo "DIY_SH5=${DIY_SH5}" >> $GITHUB_ENV
        echo "DIY_SH6=${DIY_SH6}" >> $GITHUB_ENV
        echo "DIY_SH7=${DIY_SH7}" >> $GITHUB_ENV
        
        echo "FREE_UP_DISK=${FREE_UP_DISK}" >> $GITHUB_ENV
        echo "UPLOAD_BIN_DIR_FOR_ARTIFACT=${UPLOAD_BIN_DIR_FOR_ARTIFACT}" >> $GITHUB_ENV
        echo "UPLOAD_FIRMWARE_FOR_ARTIFACT=${UPLOAD_FIRMWARE_FOR_ARTIFACT}" >> $GITHUB_ENV
        echo "UPLOAD_FIRMWARE_FOR_RELEASE=${UPLOAD_FIRMWARE_FOR_RELEASE}" >> $GITHUB_ENV
        echo "UPLOAD_FIRMWARE_TO_COWTRANSFER=${UPLOAD_FIRMWARE_TO_COWTRANSFER}" >> $GITHUB_ENV
        echo "UPLOAD_FIRMWARE_TO_WETRANSFER=${UPLOAD_FIRMWARE_TO_WETRANSFER}" >> $GITHUB_ENV
        if [ ${{matrix.target}} == "x86_64" ]; then
            echo "ARCH=linux/amd64" >> $GITHUB_ENV
            echo "MTARGET=x86_64" >> $GITHUB_ENV
        elif [[ ${{matrix.target}} =~ (Rpi-4B|nanopi-r2s|nanopi-r4s) ]]; then
            echo "ARCH=linux/arm64" >> $GITHUB_ENV
        fi
        if [ ${{matrix.target}} == "Rpi-4B" ]; then
            echo "MTARGET=aarch64_cortex-a72" >> $GITHUB_ENV
        elif [ ${{matrix.target}} == "nanopi-r2s" ]; then
            echo "MTARGET=aarch64_generic" >> $GITHUB_ENV
        fi
 
    - name: Initialization environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc
        sudo -E apt-get -qq update
        sudo -E apt-get -qq install $(curl -fsSL git.io/depends-ubuntu-2004)
        sudo -E apt-get -qq autoremove --purge
        sudo -E apt-get -qq clean
        sudo timedatectl set-timezone "$TZ"
        sudo mkdir -p /workdir
        sudo chown $USER:$GROUPS /workdir
    
    - name: Get current date
      id: date
      run: |
        echo "date=$(date +'%m/%d_%Y_%H/%M')" >> $GITHUB_ENV
        echo "date2=$(date +'%m/%d_%Y')" >> $GITHUB_ENV
        echo "date3=$(date +'%m.%d')" >> $GITHUB_ENV
        echo "date4=$(date +'%m.%d.%Y')" >> $GITHUB_ENV
        
    - name: Clone source code
      working-directory: /workdir
      run: |
        latest_release="$(curl -s https://github.com/openwrt/openwrt/tags | grep -Eo "v[0-9\.]+\-*r*c*[0-9]*.tar.gz" | sed -n '/[2-9][0-9]/p' | sed -n 1p | sed 's/.tar.gz//g')"
        git clone --single-branch -b ${latest_release} https://github.com/openwrt/openwrt openwrt_release
        git clone --single-branch -b openwrt-22.03 https://github.com/openwrt/openwrt openwrt
        rm -f ./openwrt/include/version.mk
        rm -f ./openwrt/include/kernel.mk
        rm -f ./openwrt/include/kernel-5.10
        rm -f ./openwrt/include/kernel-version.mk
        rm -f ./openwrt/include/toolchain-build.mk
        rm -f ./openwrt/include/kernel-defaults.mk
        rm -f ./openwrt/package/base-files/image-config.in
        rm -rf ./openwrt/target/linux/*
        rm -rf ./openwrt/package/kernel/linux/*
        cp -f ./openwrt_release/include/version.mk ./openwrt/include/version.mk
        cp -f ./openwrt_release/include/kernel.mk ./openwrt/include/kernel.mk
        cp -f ./openwrt_release/include/kernel-5.10 ./openwrt/include/kernel-5.10
        cp -f ./openwrt_release/include/kernel-version.mk ./openwrt/include/kernel-version.mk
        cp -f ./openwrt_release/include/toolchain-build.mk ./openwrt/include/toolchain-build.mk
        cp -f ./openwrt_release/include/kernel-defaults.mk ./openwrt/include/kernel-defaults.mk
        cp -f ./openwrt_release/package/base-files/image-config.in ./openwrt/package/base-files/image-config.in
        cp -f ./openwrt_release/version ./openwrt/version
        cp -f ./openwrt_release/version.date ./openwrt/version.date
        cp -rf ./openwrt_release/target/linux/* ./openwrt/target/linux/
        cp -rf ./openwrt_release/package/kernel/linux/* ./openwrt/package/kernel/linux/
        
        ln -sf /workdir/openwrt $GITHUB_WORKSPACE/openwrt
            
        
    - name: Free up disk space
      if: env.FREE_UP_DISK == 'true'
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo mkdir -p -m 777 /mnt/openwrt/dl /mnt/openwrt/staging_dir
        ln -sf /mnt/openwrt/dl openwrt/dl
        ln -sf /mnt/openwrt/staging_dir openwrt/staging_dir
        
        
    - name: Load custom configuration
      run: |
        cp -Rf `find ./ -maxdepth 1 -type d ! -path './openwrt' ! -path './'` openwrt
        cd openwrt
        
        echo "Apply files..."
        if [ -n "$(ls -A "devices/common/files" 2>/dev/null)" ]; then
        cp -rf devices/common/files files
        fi
        if [ -n "$(ls -A "devices/${{matrix.target}}/files" 2>/dev/null)" ]; then
        cp -rf devices/${{matrix.target}}/files/* files/
        fi
        
        echo "Apply diy..."
        chmod +x devices/common/$DIY_SH
        /bin/bash "devices/common/$DIY_SH"
        if [ -f "devices/${{matrix.target}}/$DIY_SH" ]; then
          chmod +x devices/${{matrix.target}}/$DIY_SH
          /bin/bash "devices/${{matrix.target}}/$DIY_SH"
        fi
        
        echo "Apply SCRIPTS..."
        chmod +x SCRIPTS/$DIY_SH1
        /bin/bash "SCRIPTS/$DIY_SH1"
        
        chmod +x SCRIPTS/$DIY_SH2
        /bin/bash "SCRIPTS/$DIY_SH2"
        
        chmod +x SCRIPTS/X86/$DIY_SH7
        /bin/bash "SCRIPTS/X86/$DIY_SH7"
        
        chmod +x SCRIPTS/$DIY_SH4
        /bin/bash "SCRIPTS/$DIY_SH4"
        
        chmod +x SCRIPTS/$DIY_SH3
        /bin/bash "SCRIPTS/$DIY_SH3"
        
        chmod +x SCRIPTS/$DIY_SH5
        /bin/bash "SCRIPTS/$DIY_SH5" -a
        
        
        
        echo "Apply diy package and default-settings..."
        if [ -n "$(ls -A "devices/common/diy" 2>/dev/null)" ]; then
         cp -Rf devices/common/diy/* ./
         fi
         if [ -n "$(ls -A "devices/${{matrix.target}}/diy" 2>/dev/null)" ]; then
         cp -Rf devices/${{matrix.target}}/diy/* ./
         fi
        
        if [ -f "devices/common/default-settings" ]; then
        cp -f devices/common/default-settings package/lean/default-settings/files/zzz-default-settings
        fi
        if [ -f "devices/${{matrix.target}}/default-settings" ]; then
        cat devices/${{matrix.target}}/default-settings >> package/lean/default-settings/files/zzz-default-settings
        fi
        
        echo "Apply config..."
        cp -f devices/common/$CONFIG_FILE .config
        if [ -f "devices/${{matrix.target}}/$CONFIG_FILE" ]; then
          echo >> .config
          cat devices/${{matrix.target}}/$CONFIG_FILE >> .config
        fi
  

        
    - name: Load && Update feeds
      run: |
          if [ -f "devices/common/feeds.conf.default" ]; then       
          (
            rm -Rf openwrt/feeds.conf.default
            mv devices/common/feeds.conf.default openwrt/     
          )
          fi 
          if [ -f "devices/${{matrix.target}}/feeds.conf.default" ]; then       
          (	       
           mv devices/${{matrix.target}}/feeds.conf.default openwrt/	         
          )
          fi
        
        
  
    - name: Apply patches
      run: |
       cd openwrt
        find "devices/common/patches/" -type f ! -path 'devices/common/patches/china_mirrors.patch' -name '*.patch' -print0 | sort -z | xargs -I % -t -0 -n 1 sh -c "cat '%'  | patch -d './' -p1 -E --forward --no-backup-if-mismatch"
        if [ -n "$(ls -A "devices/${{matrix.target}}/patches" 2>/dev/null)" ]; then
          find "devices/${{matrix.target}}/patches" -type f -name '*.patch' -print0 | sort -z | xargs -I % -t -0 -n 1 sh -c "cat '%'  | patch -d './' -p1 -E --forward --no-backup-if-mismatch"
         fi
        
    - name: Default PPPOE Setting
      if: env.PPPOE_USERNAME && env.PPPOE_PASSWD
      run: |
        sed -i '$i uci set network.wan.username=${{ env.PPPOE_USERNAME }}' openwrt/package/*/*/default-settings/root/etc/uci-defaults/99-default-settings
        sed -i '$i uci set network.wan.password=${{ env.PPPOE_PASSWD }}' openwrt/package/*/*/default-settings/root/etc/uci-defaults/99-default-settings
        sed -i '$i uci commit network' openwrt/package/*/*/default-settings/root/etc/uci-defaults/99-default-settings
        
    - name: SSH connection to Actions
      uses: P3TERX/ssh2actions@v1.0.0
      if: (github.event.inputs.ssh == 'true' && github.event.inputs.ssh  != 'false') || contains(github.event.action, 'ssh')

    - name: Download package
      id: package
      run: |
        cd openwrt
        make defconfig
        make download -j8
        find dl -size -1024c -exec ls -l {} \;
        find dl -size -1024c -exec rm -f {} \;

    - name: Cache
      uses: klever1988/cachewrtbuild@main
      if: contains(github.event.action, 'nocache') == false
      with:
        ccache: 'true'
        prefix: ${{ github.workspace }}/openwrt



    - name: Compile the firmware
      id: compile
      run: |
        cd openwrt
        echo -e "$(($(nproc)+1)) thread compile"
        make -j$(($(nproc)+1)) || make -j1 V=s
        echo "::set-output name=status::success"
        
    - name: Check space usage
      if: (!cancelled())
      run: df -hT
      
    - name: Upload bin directory
      uses: actions/upload-artifact@main
      if: env.UPLOAD_BIN_DIR_FOR_ARTIFACT == 'true'
      with:
        name: OpenWrt_bin_${{matrix.target}}
        path: openwrt/bin

    - name: Organize files
      id: organize
      run: |
        rm -rf ./firmware/
        mkdir -p ./firmware/ 
        find openwrt/bin/targets/*/*  -name "*combined*" | xargs -i mv -f {} ./firmware/
        find openwrt/bin/targets/*/*  -name "*sysupgrade*" | xargs -i mv -f {} ./firmware/
        find openwrt/bin/targets/*/*  -name "*armvirt-64-default-rootfs*" | xargs -i mv -f {} ./firmware/
        find openwrt/bin/targets/*/*  -name "sha256sums" | xargs -i mv -f {} ./firmware/
        find openwrt/bin/packages/*/*  -name "*accesscontrol*" | xargs -i mv -f {} ./firmware/accesscontrol
        find openwrt/bin/packages/*/*  -name "*adblock*" | xargs -i mv -f {} ./firmware/
        find openwrt/bin/packages/*/*  -name "*adbyby*" | xargs -i mv -f {} ./firmware/
        find openwrt/bin/packages/*/*  -name "*adguardhome*" | xargs -i mv -f {} ./firmware/
        find openwrt/bin/packages/*/*  -name "*airplay2*" | xargs -i mv -f {} ./firmware/
        find openwrt/bin/packages/*/*  -name "*amule*" | xargs -i mv -f {} ./firmware/
        find openwrt/bin/packages/*/*  -name "*aria2" | xargs -i mv -f {} ./firmware/
        find openwrt/bin/packages/*/*  -name "*baidupcs-web*" | xargs -i mv -f {} ./firmware/
        find openwrt/bin/packages/*/*  -name "*cifsd" | xargs -i mv -f {} ./firmware/
        find openwrt/bin/packages/*/*  -name "*cifs-mount*" | xargs -i mv -f {} ./firmware/
        find openwrt/bin/packages/*/*  -name "*diskman*" | xargs -i mv -f {} ./firmware/
        find openwrt/bin/packages/*/*  -name "*ddns*" | xargs -i mv -f {} ./firmware/
        find openwrt/bin/packages/*/*  -name "*dnsfilter*" | xargs -i mv -f {} ./firmware/
        #find openwrt/bin/packages/*/*  -name "*dockerman*" | xargs -i mv -f {} ./firmware/
        #find openwrt/bin/packages/*/*  -name "*docker*" | xargs -i mv -f {} ./firmware/
        find openwrt/bin/packages/*/*  -name "*familycloud*" | xargs -i mv -f {} ./firmware/
        find openwrt/bin/packages/*/*  -name "*frpc*" | xargs -i mv -f {} ./firmware/
        find openwrt/bin/packages/*/*  -name "*frps*" | xargs -i mv -f {} ./firmware/
        find openwrt/bin/packages/*/*  -name "*flowoffload*" | xargs -i mv -f {} ./firmware/
        find openwrt/bin/packages/*/*  -name "*hd-idle*" | xargs -i mv -f {} ./firmware/
        find openwrt/bin/packages/*/*  -name "*haproxy-tcp*" | xargs -i mv -f {} ./firmware/
        find openwrt/bin/packages/*/*  -name "*ipsec-vpnd*" | xargs -i mv -f {} ./firmware/
        find openwrt/bin/packages/*/*  -name "*ipsec-vpnserver-manyusers*" | xargs -i mv -f {} ./firmware/
        find openwrt/bin/packages/*/*  -name "*iptvhelper*" | xargs -i mv -f {} ./firmware/
        find openwrt/bin/packages/*/*  -name "*jd-dailybonus*" | xargs -i mv -f {} ./firmware/
        find openwrt/bin/packages/*/*  -name "*node*" | xargs -i mv -f {} ./firmware/
        find openwrt/bin/packages/*/*  -name "*kodexplorer*" | xargs -i mv -f {} ./firmware/
        find openwrt/bin/packages/*/*  -name "*nginx*" | xargs -i mv -f {} ./firmware/
        find openwrt/bin/packages/*/*  -name "*php7*" | xargs -i mv -f {} ./firmware/
        find openwrt/bin/packages/*/*  -name "*ikoolproxy*" | xargs -i mv -f {} ./firmware/
        find openwrt/bin/packages/*/*  -name "*minidlna*" | xargs -i mv -f {} ./firmware/
        find openwrt/bin/packages/*/*  -name "*forked-daapd*" | xargs -i mv -f {} ./firmware/
        find openwrt/bin/packages/*/*  -name "*music-remote-center*" | xargs -i mv -f {} ./firmware/
        find openwrt/bin/packages/*/*  -name "*mwan3*" | xargs -i mv -f {} ./firmware/
        find openwrt/bin/packages/*/*  -name "*mwan3helper*" | xargs -i mv -f {} ./firmware/
        find openwrt/bin/packages/*/*  -name "*n2n_v2*" | xargs -i mv -f {} ./firmware/
        find openwrt/bin/packages/*/*  -name "*nft-qos*" | xargs -i mv -f {} ./firmware/
        find openwrt/bin/packages/*/*  -name "*nps*" | xargs -i mv -f {} ./firmware/
        find openwrt/bin/packages/*/*  -name "*nfs*" | xargs -i mv -f {} ./firmware/
        find openwrt/bin/packages/*/*  -name "*openclash*" | xargs -i mv -f {} ./firmware/
         find openwrt/bin/packages/*/*  -name "*ruby*" | xargs -i mv -f {} ./firmware/
        find openwrt/bin/packages/*/*  -name "*openvpn*" | xargs -i mv -f {} ./firmware/
        find openwrt/bin/packages/*/*  -name "*openvpn-server*" | xargs -i mv -f {} ./firmware/
        find openwrt/bin/packages/*/*  -name "*oaf*" | xargs -i mv -f {} ./firmware/
        find openwrt/bin/packages/*/*  -name "*passwall*" | xargs -i mv -f {} ./firmware/
        find openwrt/bin/packages/*/*  -name "*pppoe-relay*" | xargs -i mv -f {} ./firmware/
        find openwrt/bin/packages/*/*  -name "*rp-pppoe-server*" | xargs -i mv -f {} ./firmware/
        find openwrt/bin/packages/*/*  -name "*privoxy*" | xargs -i mv -f {} ./firmware/
        find openwrt/bin/packages/*/*  -name "*ps3netsrv*" | xargs -i mv -f {} ./firmware/
        find openwrt/bin/packages/*/*  -name "*qbittorrent*" | xargs -i mv -f {} ./firmware/
        find openwrt/bin/packages/*/*  -name "*python3*" | xargs -i mv -f {} ./firmware/
        find openwrt/bin/packages/*/*  -name "*rclone*" | xargs -i mv -f {} ./firmware/
        find openwrt/bin/packages/*/*  -name "*serverchan*" | xargs -i mv -f {} ./firmware/
        find openwrt/bin/packages/*/*  -name "*sqm*" | xargs -i mv -f {} ./firmware/
        find openwrt/bin/packages/*/*  -name "*softethervpn*" | xargs -i mv -f {} ./firmware/
        find openwrt/bin/packages/*/*  -name "*luci-app-ssr-plus*" | xargs -i mv -f {} ./firmware/
        find openwrt/bin/packages/*/*  -name "*syncdial*" | xargs -i mv -f {} ./firmware/
        find openwrt/bin/packages/*/*  -name "*transmission*" | xargs -i mv -f {} ./firmware/
        find openwrt/bin/packages/*/*  -name "*tinyproxy*" | xargs -i mv -f {} ./firmware/
        find openwrt/bin/packages/*/*  -name "*ttnode*" | xargs -i mv -f {} ./firmware/
        find openwrt/bin/packages/*/*  -name "*uugame*" | xargs -i mv -f {} ./firmware/ 
        find openwrt/bin/packages/*/*  -name "*udpxy*" | xargs -i mv -f {} ./firmware/
        find openwrt/bin/packages/*/*  -name "*unblockmusic*" | xargs -i mv -f {} ./firmware/
        find openwrt/bin/packages/*/*  -name "*UnblockNeteaseMusic*" | xargs -i mv -f {} ./firmware/
        find openwrt/bin/packages/*/*  -name "*usb-printer*" | xargs -i mv -f {} ./firmware/
        find openwrt/bin/packages/*/*  -name "*v2ray-server*" | xargs -i mv -f {} ./firmware/
        find openwrt/bin/packages/*/*  -name "*verysync*" | xargs -i mv -f {} ./firmware/
        find openwrt/bin/packages/*/*  -name "*vsftpd*" | xargs -i mv -f {} ./firmware/
        find openwrt/bin/packages/*/*  -name "*watchcat*" | xargs -i mv -f {} ./firmware/
        find openwrt/bin/packages/*/*  -name "*webadmin*" | xargs -i mv -f {} ./firmware/
        find openwrt/bin/packages/*/*  -name "*wireguard*" | xargs -i mv -f {} ./firmware/
        find openwrt/bin/packages/*/*  -name "*xlnetacc*" | xargs -i mv -f {} ./firmware/
        find openwrt/bin/packages/*/*  -name "*zerotier*" | xargs -i mv -f {} ./firmware/
        cp openwrt/.config  ./firmware/${{matrix.target}}.config
        #整理单个ipk并打包
        cd firmware
        zip -r luci-app-accesscontrol.zip *accesscontrol* || true
        zip -r luci-app-adblock.zip *adblock* || true
        zip -r luci-app-adbyby-plus.zip *adbyby* || true
        zip -r luci-app-adguardhome.zip *adguardhome* || true
        zip -r luci-app-airplay2.zip *airplay2* || true
        zip -r luci-app-amule.zip *amule* || true
        zip -r luci-app-aria2.zip *aria2* || true
        zip -r luci-app-baidupcs-web.zip *baidupcs-web* || true
        zip -r luci-app-cifsd.zip *cifsd* || true
        zip -r luci-app-cifs-mount.zip *cifs-mount* || true
        zip -r luci-app-cifs.zip *cifs* || true
        zip -r luci-app-diskman.zip *diskman* || true
        zip -r luci-app-ddns.zip *ddns* || true		
        zip -r luci-app-dnsfilter.zip *dnsfilter* || true	
        #zip -r luci-app-dockerman.zip *docker* || true
        zip -r luci-app-familycloud.zip *familycloud* || true		
        zip -r luci-app-frpc.zip *frpc* || true
        zip -r luci-app-frps.zip *frps* || true
        zip -r luci-app-flowoffload.zip *flowoffload* || true
        zip -r luci-app-haproxy-tcp.zip *haproxy-tcp* || true
        zip -r luci-app-hd-idle.zip *hd-idle* || true
        zip -r luci-app-ipsec-vpnd.zip *ipsec-vpnd* || true
        zip -r luci-app-ipsec-vpnserver-manyusers.zip *ipsec-vpnserver-manyusers* || true
        zip -r luci-app-iptvhelper.zip *iptvhelper* || true
        zip -r luci-app-jd-dailybonus.zip *jd-dailybonus* || true	
        zip -r luci-app-jd-dailybonus.zip *node* || true		
        zip -r luci-app-kodexplorer.zip *kodexplorer* || true	
        zip -r luci-app-kodexplorer.zip *nginx* || true	
        zip -r luci-app-kodexplorer.zip *php7* || true		
        zip -r luci-app-ikoolproxy.zip *ikoolproxy* || true		
        zip -r luci-app-minidlnazip *minidlna* || true
        zip -r luci-app-music-remote-center.zip *music-remote-center* || true	
        zip -r luci-app-orked-daapd.zip *forked-daapd* || true	
        zip -r luci-app-mwan3.zip *mwan3* || true
        zip -r luci-app-mwan3helper.zip *mwan3helper* || true
        zip -r luci-app-nft-qos.zip *nft-qos* || true
        zip -r luci-app-n2n_v2.zip *n2n_v2* || true
        zip -r luci-app-nps.zip *nps* || true
        zip -r luci-app-nfs.zip *nfs* || true
        zip -r luci-app-openclash.zip *openclash* || true
        zip -r luci-app-openclash.zip *ruby* || true
        zip -r luci-app-openvpn.zip *openvpn* || true
        zip -r luci-app-oaf.zip *oaf* || true
        zip -r luci-app-openvpn-server.zip *openvpn-server* || true
        zip -r luci-app-passwall.zip *passwall*  || true
        zip -r luci-app-pppoe-relay.zip *pppoe-relay* || true
        zip -r luci-app-privoxy.zip  *privoxy* || true
        zip -r luci-app-ps3netsrv.zip  *ps3netsrv* || true
        zip -r luci-app-qbittorrent.zip *qbittorrent* || true
        zip -r luci-app-qbittorrent.zip *python3* || true
        zip -r luci-app-rclone.zip *rclone* || true
        zip -r luci-app-serverchan.zip *serverchan* || true
        zip -r luci-app-softethervpn.zip *softethervpn* || true
        zip -r luci-app-syncdial.zip *syncdial* || true
        zip -r luci-app-ssr-plus.zip *ssr-plus* || true
        zip -r luci-app-tinyproxyzip *tinyproxy* || true
        zip -r luci-app-transmission.zip *transmission* || true
        zip -r luci-app-trojan-server.zip *trojan-server* || true
        zip -r luci-app-ttnode.zip *ttnode* || true	
        zip -r luci-app-uugamebooster.zip *uugame* || true	
        zip -r luci-app-udpxy.zip *udpxy* || true		
        zip -r luci-app-unblockmusic.zip *unblockmusic* || true
         zip -r luci-app-unblockmusic.zip *UnblockNeteaseMusic* || true
        zip -r luci-app-usb-printer.zip *usb-printer* || true
        zip -r luci-app-v2ray-server.zip *v2ray-server* || true
        zip -r luci-app-verysync.zip *verysync* || true
        zip -r luci-app-vsftpd.zip *vsftpd* || true
        zip -r luci-app-watchcat.zip *watchcat* || true
        zip -r luci-app-webadmint.zip *webadmin* || true
        zip -r luci-app-wireguard.zip *wireguard* || true
        zip -r luci-app-v2ray-server.zip *v2ray-server* || true
        zip -r luci-app-xlnetacc.zip *xlnetacc* || true
        zip -r luci-app-zerotier.zip *zerotier* || true
        #删除单个ipk并将所有ipk的zip包再次打包ipk.zip
        rm -rf *.ipk
        zip -r app-ipk.zip1 *.zip* || true
        rm -rf *.zip
        cd -
        
        cd firmware
        echo ${{ env.date4 }} > version.txt
        mv sha256sums ${{matrix.target}}_sha256sums
        #rename -v "s/^openwrt/${{ env.date3 }}-OneWrt/" *
        #rename -v "s/xiaomi_redmi-router/redmi/" *bin
        #rename -v "s/-d-team//" *bin
        #rename -v "s/friendlyarm_nanopi-r2s/nanopi-r2s/" *gz
        echo "FIRMWARE=$PWD" >> $GITHUB_ENV
        Emoji=("🎉" "🤞" "✨" "🎁" "🎈" "🎄" "🎨" "💋" "🍓" "🍕" "🍉" "💐" "🌴" "🚀" "🛸" "🗽" "⛅" "🌈" "🔥" "⛄" "🐶" "🏅" "🦄" "🐤")
        RANDOM=$$$(date +%s)
        rand=$[$RANDOM % ${#Emoji[@]}]
        echo "EMOJI=${Emoji[$rand]}" >> $GITHUB_ENV
        if [ ${{matrix.target}} == "phicomm-k2p" ]; then
        echo "NOTICE=刷机时breed里的闪存布局请选择斐讯而非默认的公版" >> $GITHUB_ENV
        elif [ ${{matrix.target}} == "x86_64" ]; then
        echo "NOTICE=请分配不少于800M的存储容量" >> $GITHUB_ENV
        fi

    - name: Deploy files to server
      uses: easingthemes/ssh-deploy@main
      continue-on-error: true
      if: env.SSH_PRIVATE_KEY && ! contains(github.event.action, 'noser')
      with:
        SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
        ARGS: "-avzr --exclude="
        SOURCE: firmware/
        REMOTE_HOST: op.supes.top
        REMOTE_USER: root
        TARGET: "/www/wwwroot/op.supes.top/firmware/${{matrix.target}}/"
 
    - name: Upload firmware to cowtransfer
      if: env.UPLOAD_FIRMWARE_TO_COWTRANSFER == 'true'
      continue-on-error: true
      run: |
        curl -fsSL git.io/file-transfer | sh
        cowurl=$(./transfer cow --block 2621440 -s --no-progress ${FIRMWARE})
        cowurl=$(echo $cowurl | grep -o -E "https[^ ]*")
        echo "COWURL=$cowurl" >> $GITHUB_ENV
        echo "Download Link: ${{ env.EMOJI }} $cowurl ${{ env.EMOJI }} 🚀"
 
    - name: Upload firmware to WeTransfer
      if: env.UPLOAD_FIRMWARE_TO_WETRANSFER == 'true' && ! contains(github.event.action, 'noup')
      continue-on-error: true
      run: |
        curl -fsSL git.io/file-transfer | sh
        wetrans=$(./transfer wet -s -p 16 --no-progress ${FIRMWARE})
        wetrans=$(echo $wetrans | grep -o -E "https[^ ]*")
        echo "WETRANS=$wetrans" >> $GITHUB_ENV
        echo "Download Link: ${{ env.EMOJI }} $wetrans ${{ env.EMOJI }} 🚀"

    - name: Create release
      id: create_release
      if: env.REPO_TOKEN && env.UPLOAD_FIRMWARE_FOR_RELEASE == 'true'
      continue-on-error: true
      run: |
        echo -e "墙内加速下载 🚀:\n" >> release.txt
        #echo -e "[腾讯云] (https://op.supes.top/firmware/${{matrix.target}}/ ☁)\n" >> release.txt
        [ ${{ env.WETRANS }} ] && echo -e "[WeTransfer] (${{ env.WETRANS }} 🗽)\n" >> release.txt
        [ ${{ env.COWURL }} ] && echo -e "[奶牛上传] (${{ env.COWURL }} 🐮)\n" >> release.txt
        [ ${{ env.NOTICE }} ] && echo -e "${{ env.NOTICE }}" >> release.txt || true

    - name: Upload firmware for release
      uses: softprops/action-gh-release@v1
      continue-on-error: true
      if: env.REPO_TOKEN && env.UPLOAD_FIRMWARE_FOR_RELEASE == 'true'
      env:
        GITHUB_TOKEN: ${{ secrets.REPO_TOKEN }}
      with:
        files: "${{ env.FIRMWARE }}/*"
        name: ${{ env.date2 }}-YAOP-${{matrix.target}} ${{ env.EMOJI }}
        tag_name: ${{ env.date }}-YAOP-${{matrix.target}}
        body_path: release.txt

    - name: Upload firmware for artifact
      uses: actions/upload-artifact@main
      continue-on-error: true
      if: env.UPLOAD_FIRMWARE_FOR_ARTIFACT == 'true'
      with:
        name: ${{ env.date3 }}-YAOP-${{matrix.target}}
        path: ${{ env.FIRMWARE }}
        
    - name: WeChat notification
      continue-on-error: true
      if: env.SCKEY
      run: |
        [ steps.compile.outputs.status == 'success' ] && curl https://sc.ftqq.com/${{ secrets.SCKEY }}.send?text=🎉OpenWrt_${{ env.date3 }}_${{matrix.target}}编译完成😋|| curl https://sc.ftqq.com/${{ secrets.SCKEY }}.send?text=❌OpenWrt_${{ env.date3 }}_${{matrix.target}}编译失败😂

    - name: Telegram notification
      if: env.TELEGRAM_TOKEN && ! contains(github.event.action, 'notg')
      continue-on-error: true
      run: |
        # [ steps.compile.outputs.status == 'success' ] && curl -k --data chat_id="${{ secrets.TELEGRAM_CHAT_ID }}" --data "text=🎉 OpenWrt ${{ env.date3 }} ${{matrix.target}} 编译成功 😋  https://op.supes.top/firmware/${{matrix.target}}/  ${{ env.COWURL }}   ${{ env.WETRANS }} 🚀" "https://api.telegram.org/bot${{ secrets.TELEGRAM_TOKEN }}/sendMessage" || curl -k --data chat_id="${{ secrets.TELEGRAM_TO }}" --data "text=❌ OpenWrt ${{ env.date3 }} ${{matrix.target}} 编译失败 😂" "https://api.telegram.org/bot${{ secrets.TELEGRAM_TOKEN }}/sendMessage"

    - name: Delete workflow runs
      uses: GitRML/delete-workflow-runs@main
      with:
        retain_days: 1
        keep_minimum_runs: 15

    - name: Remove old Releases
      uses: dev-drprasad/delete-older-releases@master
      continue-on-error: true
      if: env.UPLOAD_FIRMWARE_FOR_RELEASE == 'true' && !cancelled()
      with:
        keep_latest: 15
        delete_tags: true
      env:
        GITHUB_TOKEN: ${{ secrets.REPO_TOKEN }}
